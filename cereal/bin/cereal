#!/bin/env python
"""cereal: a Python library for exploring cryptocurrency markets.
usage: cereal [--version] [--debug] [--config=<path>] [--help]
           [--telegram] [<command>] [<args>...]

Options:
    -d, --debug           Show debugging info.
    -h, --help            Show this help screen.
    -v, --version         Show cereal version.
    -t, --telegram        Use telegram bot.
"""

__copyright__ = "Copyright (C) 2019 Techcat_ Haohan Li"

__license__ = """
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import os
import json
import atexit
import logging
import telegram
import subprocess

from docopt import docopt
from cereal import version
from cereal import Monitor
from apscheduler.schedulers.blocking import BlockingScheduler

LOGGER = logging.getLogger("cereal")


def log_dict(dictionary, indent=0):
    """Helps logging dictionary with indent.
    """
    prefix = ''.join('\t' for i in range(indent))
    return prefix + prefix.join(
        dictionary.__repr__().splitlines(True)
        )


def parse_command_args(doc, command, args, logger=LOGGER):
    """Processes cereal commands with docopt.
    """
    logger.debug("Entering cereal command: %s", command)
    command_args = docopt(doc, argv=[command] + args)
    logger.debug("Running %s command with arguments:\n%s", command,
                 log_dict(command_args, 1))
    return command_args


if __name__ == "__main__":

    # parse command line input
    ARGUMENTS = docopt(__doc__,
                       version="\n".join(
                           ["cereal " + version.VERSION_TEXT + "\n",
                            __copyright__,
                            __license__,
                            ]),
                       options_first=True)

    # set logging level
    if ARGUMENTS['--debug']:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    LOGGER.info("This is cereal, version %s.", version.VERSION_TEXT)
    LOGGER.debug("Received global arguments:\n%s", log_dict(ARGUMENTS, 1))

    # TODO: read config file and handle commands
    if ARGUMENTS['--config']:
        with open(ARGUMENTS['--config']) as config_file:
            config = json.load(config_file)
        LOGGER.debug("Loaded config file:\n%s", config)
    else:
        config_path = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', 'utils', 'config.json')
        with open(config_path) as config_file:
            config = json.load(config_file)
        LOGGER.debug("Loaded config file:\n%s", config)

    # set telegram monitor
    if ARGUMENTS['--telegram']:
        bot_chatID = config.get("telegram", []).get("bot_chatID", [])
        bot_token = config.get("telegram", []).get("bot_token", [])
        bot = telegram.Bot(token=bot_token)
        bot.send_message(bot_chatID, 'Hi, this is cereal, will serve as cereal reporter!')
        LOGGER.debug("Inited telegram bot")

    if ARGUMENTS['<command>'] == 'deploy':
        deploy_path = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', 'shell', 'deploy.sh')
        os.popen('chmod +x {}'.format(deploy_path))
        try:
            subprocess.call(['{}'.format(deploy_path)])
        except KeyboardInterrupt:
            print('\n')
            exit(0)

    if ARGUMENTS['<command>'] == 'monitor':
        url = config.get("url", "http://localhost:9922")
        monitor = Monitor(url, config, ARGUMENTS['--telegram'])
        job_defaults = {'coalesce': False, 'max_instances': 5}
        scheduler = BlockingScheduler(timezone="UTC", job_defaults=job_defaults)
        if ARGUMENTS['<args>']:
            monitor.trigger('{}'.format(ARGUMENTS['<args>'][0]))
            scheduler.add_job(lambda: monitor.trigger('{}'.format(ARGUMENTS['<args>'][0])), trigger='interval',
                              minutes=5)
        else:
            monitor.trigger()
            scheduler.add_job(lambda: monitor.trigger(), trigger='interval', minutes=5)
        scheduler.print_jobs()
        try:
            scheduler.start()
        except KeyboardInterrupt as ex:
            print('\n')
            LOGGER.debug('Got SIGTERM! Terminating...')
            atexit.register(lambda: scheduler.shutdown())

    if ARGUMENTS['<command>'] == 'start':
        print("start")
    elif ARGUMENTS['<command>'] == 'stop':
        print("stop")
    else:
        pass


# vim: ft=python
